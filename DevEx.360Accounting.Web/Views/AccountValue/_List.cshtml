@*@model DevEx_360Accounting_Web.Models.AccountValueListModel

@{
    if (Model.AccountValues != null)
    {
        if (Model.AccountValues.Count > 0)
        {
            var grid = new WebGrid(canSort: true,
                                    rowsPerPage: _360Accounting.Common.Utility.Configuration.GridRows,
                                    ajaxUpdateContainerId: "dvAccountList", ajaxUpdateCallback: "CallBack");

            if (Model.Page == null) { grid.PageIndex = 0; } else { grid.PageIndex = Model.Page.Value - 1; }

            grid.Bind(Model.AccountValues, rowCount: Model.TotalRecords, autoSortAndPage: false);

            <div class="col-sm-offset-10">
                @{ var startrow = (grid.RowsPerPage * grid.PageIndex) + 1;}
                @{ var endrow = (startrow + grid.Rows.Count - 1);}
                Displaying: <b>@startrow - @endrow</b>
                <br />
                TotalRecords <b>@grid.TotalRowCount</b>
            </div>


            @grid.GetHtml(tableStyle: "table table-bordered table-hover table-striped",
                            mode: WebGridPagerModes.All,
                            numericLinksCount: 10,
                            htmlAttributes: new { style = "width:100%", @class = "table", id = "tblAccountValues" },
                            columns: grid.Columns
                            (
                            grid.Column("", header: "Actions", style: "ActionLink",
                                                          format: (item) => Html.Raw("<a class = 'delete' href='" + @Url.Content("~/AccountValue/Delete/") + item.Id + "'><img src='" + @Url.Content("~/Content/images/delete.png") + "' alt='' title='Delete' style='border:0'/></a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href='" + @Url.Content("~/AccountValue/Edit/") + item.Id + "'><img src='" + @Url.Content("~/Content/images/edit.png") + "' alt='' title='Edit' style='border:0'/></a>")),
                            grid.Column(columnName: "Segment",
                                            header: "Segment",
                                            canSort: true),
                            grid.Column("ValueName", header: "Detail", canSort: false),
                            grid.Column("Value", header: "Value", canSort: false),
                            grid.Column("StartDate", header: "Start Date", canSort:true),
                            grid.Column("EndDate", header: "End Date", canSort:true),
                            grid.Column("AccountType", header: "Account Type", canSort:true),
                            grid.Column("Levl", header: "Level", canSort:true)))
        }
        else
        {
            <div id='dvNoRecord'>No Record Found!</div>
        }
    }
}

<script type="text/javascript">
    $(document).ready(function () {
        $('.delete').click(function () {
            return confirm("Sure! you wanted to delete ?");
        });
    });

    function CallBack(context) {
        $("#dvAccountList")[0].innerHTML = context;
    }
</script>*@

@{Html.DevExpress().GetStyleSheets(new StyleSheet { ExtensionSuite = ExtensionSuite.GridView, Theme = "Office2010Black" },
            new StyleSheet { ExtensionSuite = ExtensionSuite.Editors, Theme = "Office2010Black" },
            new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout, Theme = "Office2010Black" });

    //Html.EnableClientValidation();
    //Html.EnableUnobtrusiveJavaScript();

    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "AccountValue";
        settings.Theme = "Office2010Black";
        settings.KeyFieldName = "Id";

        settings.CallbackRouteValues = new { Controller = "AccountValue", Action = "AccountValuesPartial" };

        settings.SettingsBehavior.ConfirmDelete = true;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.Columns.Add(column =>
        {
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    Html.ActionLink("Edit", "List2", new { id = DataBinder.Eval(c.DataItem, "Id") }) + "&nbsp;" +
                    Html.ActionLink("Delete", "List2", new { id = DataBinder.Eval(c.DataItem, "Id") },
                        new { onclick = "return confirm('Do you really want to delete this record?')" })
                );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    Html.ActionLink("New", "Create", new { Id = -1 }).ToHtmlString()
                );
            });
            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 70;
        });        
        settings.Columns.Add("Segment");
        settings.Columns.Add("ValueName", "Detail");
        settings.Columns.Add("Value");
        settings.Columns.Add("StartDate");
        settings.Columns.Add("EndDate");
        settings.Columns.Add("AccountType");
        settings.Columns.Add("Levl", "Level");
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()