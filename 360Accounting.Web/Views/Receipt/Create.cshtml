@model _360Accounting.Web.Models.ReceiptViewModel

@{
    ViewBag.Title = "Create Receipt";
}

<script src="~/Scripts/jquery-ui-1.10.3.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                @ViewBag.Title
            </h3>
        </div>
    </div>

    @using (Html.BeginForm("Create", "Receipt", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.ValidationSummary()
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.SOBId)
        @Html.HiddenFor(m => m.PeriodId)
        @Html.HiddenFor(m => m.CustomerId)
        @Html.HiddenFor(m => m.CurrencyId)
        @Html.HiddenFor(m => m.CompanyId)
        @Html.HiddenFor(m => m.CreateBy)
        @Html.HiddenFor(m => m.CreateDate)
        @Html.HiddenFor(m => m.UpdateBy)
        @Html.HiddenFor(m => m.UpdateDate)
        <input id="PrecisionLimit" type="hidden"value="@SessionHelper.PrecisionLimit" />

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ReceiptNumber)
                    @Html.TextBoxFor(model => model.ReceiptNumber, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ReceiptDate)
                    @Html.EditorFor(model => model.ReceiptDate, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ReceiptAmount)
                    @Html.TextBoxFor(model => model.ReceiptAmount, new { @class = "form-control", @type="number" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ConversionRate)
                    @Html.TextBoxFor(model => model.ConversionRate, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group customDropDownWrapper">
                    @Html.LabelFor(model => model.Status)
                    @Html.DropDownListFor(model => model.Status, new List<SelectListItem> { new SelectListItem {Text = "Confirm", Value = "Confirm"}}, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks)
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group customDropDownWrapper">
                    @Html.LabelFor(model => model.CustomerSiteId)
                    @Html.DropDownListFor(model => model.CustomerSiteId, Model.CustomerSites, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group customDropDownWrapper">
                    @Html.LabelFor(model => model.BankId)
                    @Html.DropDownListFor(model => model.BankId, Model.Banks, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group customDropDownWrapper">
                    @Html.LabelFor(model => model.BankAccountId)
                    @Html.DropDownListFor(model => model.BankAccountId, Model.BankAccounts, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-default tstyCus-btn" />
                    <input id="btnCancel" type="button" value="Cancel" class="btn btn-default tstyCus-btn" />
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('[type=date]').attr('class', 'form-control');
    });

    //Validation
    $('#ReceiptAmount').keypress(function (e) {
        if ($(this).val().indexOf('.') > -1) {
            if (e.charCode == 46)
                e.preventDefault();
            else {
                var decimalIndex = $(this).val().indexOf('.');
                if ($(this).val().substring(decimalIndex + 1).length == $('#PrecisionLimit').val())
                    e.preventDefault();
            }
        }
    });

    $('#BankId').change(function () {
        SetMultiselect('BankAccountId', GetData('@Url.Content("~/Receipt/BankAccountList")', { bankId: $(this).val() }));
    });

    $('#ReceiptDate').blur(function () {
        $.ajax({
            url: '@Url.Content("~/Receipt/CheckReceiptDate")',
            data: { receiptDate: $(this).val(), periodId: $('#PeriodId').val() },
            type: 'post',
            datatype: 'json',
            success: function (data) {
                if (!data) {
                    alert('Receipt Date must lie in the range of current period.');
                    $('#ReceiptDate').focus();
                    $('#btnSave').attr('disabled', true)
                }
                else
                    $('#btnSave').attr('disabled', false)
            },
            error: function () { }
        })
    })

    $('#btnCancel').click(function () {
        var url = '@Url.Content("~/Receipt/Index/")';
        window.location.href = url;
    });

    function GetData(url, data) {
        var returnedData = [];
        $('#dvList').html("Please wait..");
        $.ajax({
            url: url,
            data: data,
            datatype: 'json',
            type: 'get',
            async: false,
            error: function (data) { alert(data); },
            success: function (rtnData) {
                returnedData = rtnData;
            }
        });

        return returnedData;
    }
</script>